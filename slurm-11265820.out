============================================================================================== 
Warning! Mixing Conda and module environments may lead to corruption of the
user environment. 
We do not recommend users mixing those two environments unless absolutely
necessary. Note that 
SURF does not provide any support for Conda environment.
For more information, please refer to our software policy page:
https://servicedesk.surf.nl/wiki/display/WIKI/Software+policy+Snellius#SoftwarepolicySnellius-UseofAnacondaandMinicondaenvironmentsonSnellius 

Remember that many packages have already been installed on the system and can
be loaded using 
the 'module load <package__name>' command. If you are uncertain if a package is
already available 
on the system, please use 'module avail' or 'module spider' to search for it.
============================================================================================== 
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: xiaweijie1996 (weijie_xia) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.19.9
wandb: Run data is saved locally in /gpfs/home4/wxia/TransformerEM-GMM/wandb/run-20250418_193726-g76lqvui
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run rose-dream-3
wandb: ‚≠êÔ∏è View project at https://wandb.ai/xiaweijie1996/load_usa_96_train_merge
wandb: üöÄ View run at https://wandb.ai/xiaweijie1996/load_usa_96_train_merge/runs/g76lqvui
/home/wxia/TransformerEM-GMM/exp/asset/em_pytorch.py:114: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  X = torch.tensor(X)
shape of data:  (10000, 250, 97)
shape of data:  (10000, 250, 97)
lenthg of train data:  8000.0
shape of data:  (10000, 250, 97)
lenthg of test data:  1000.0
cuda
shape of data:  (10000, 250, 97)
number of parameters:  19416698
Traceback (most recent call last):
  File "/home/wxia/TransformerEM-GMM/exp/exp_second_round/usa_load_15minutes/train_merge.py", line 87, in <module>
    _loss, _random_num, _new_para, _param, r_samples, r_samples_part, _mm = gmm_train_tool.get_loss_le(dataset, encoder,
  File "/home/wxia/TransformerEM-GMM/exp/asset/gmm_train_tool.py", line 76, in get_loss_le
    encoder_out = encoder(_train_sample_part_emb)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/wxia/TransformerEM-GMM/exp/model/gmm_transformer.py", line 143, in forward
    tokens = block(tokens)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/wxia/TransformerEM-GMM/exp/model/gmm_transformer.py", line 101, in forward
    x = x + self.mlp(self.norm2(x))
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home4/wxia/TransformerEM-GMM/.venv/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/wxia/TransformerEM-GMM/exp/model/gmm_transformer.py", line 27, in forward
    return x_normalized * self.weight
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 82.00 MiB. GPU 0 has a total capacity of 39.50 GiB of which 14.12 MiB is free. Including non-PyTorch memory, this process has 39.47 GiB memory in use. Of the allocated memory 37.90 GiB is allocated by PyTorch, and 1.08 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[1;34mwandb[0m: 
[1;34mwandb[0m: üöÄ View run [33mrose-dream-3[0m at: [34mhttps://wandb.ai/xiaweijie1996/load_usa_96_train_merge/runs/g76lqvui[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20250418_193726-g76lqvui/logs[0m

JOB STATISTICS
==============
Job ID: 11265820
Cluster: snellius
User/Group: wxia/wxia
State: RUNNING
Nodes: 1
Cores per node: 18
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:12:36 core-walltime
Job Wall-clock time: 00:00:42
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 30.00 GB (30.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
